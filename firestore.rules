rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }

    function currentUser() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function isPremium() {
      return request.auth.token.stripeRole == "premium";
    }

    function affectedKeys() {
      return request.resource.data.diff(resource.data).affectedKeys();
    }

    function isLoggedIn() {
      return request.auth.uid != null;
    }

    function isVerified() {
      return request.auth.token.email_verified == true;
    }

    function isAnonymous() {
      return !('email' in request.auth.token);
    }

    match /messages/{docId} {
      allow read: if isLoggedIn() &&
                  (resource.data.isDeleted == false || currentUser().isModerator == true || currentUser().isAdmin == true);
      allow update: if (currentUser().isModerator == true || currentUser().isAdmin == true) && 
                      // If the request only has the isDeleted field
                      // https://firebase.google.com/docs/firestore/security/rules-fields#allowing_only_certain_fields_to_be_changed
                      affectedKeys().hasOnly(['isDeleted']);
    }

    match /modActionLog/{docId} {
      allow read: if isLoggedIn() && currentUser().isAdmin == true;
      allow create: if isLoggedIn() && currentUser().isAdmin == true;
      allow delete: if isLoggedIn() && currentUser().isAdmin == true;
    }

    match /settings/filteredWords {
      allow read: if isLoggedIn() && currentUser().isAdmin == true;
      allow create: if isLoggedIn() && currentUser().isAdmin == true;
      allow update: if isLoggedIn() && currentUser().isAdmin == true;
      allow delete: if isLoggedIn() && currentUser().isAdmin == true;
    }
  
    match /userPresences/{docId} {
      allow create: if true;
      allow read: if true;
      allow update: if true;
      allow delete: if true;
    }
  
    match /conversations/{docId} {
      allow create: if isLoggedIn() && isVerified() && request.auth.uid in request.resource.data.userIds;
      allow read: if isLoggedIn() && request.auth.uid in resource.data.userIds;
      allow update: if isLoggedIn() && request.auth.uid in resource.data.userIds;
    }
  
    match /conversations/{conversationId}/messages/{messageId} {
      allow create: if isLoggedIn() && isVerified();
      allow read: if isLoggedIn() && (resource.data.isDeleted == false || currentUser().isModerator == true || currentUser().isAdmin == true);
    }
  
    match /users/{uid} {
      allow read: if true;
      allow update: if isDocOwner(uid)
                    && !isAnonymous()
                    // NOTE: Don't allow updating these keys
                    && (!affectedKeys().hasAny(['isAdmin', 'isModerator', 'isBanned']))
                    // NOTE: Don't allow updating these keys unless user is premium
                    && (isPremium() 
                        || (!affectedKeys()
                            .hasAny(['msgBgImg', 'msgBgColor', 'msgBgTransparency', 'msgBgRepeat', 'msgBgPosition', 'msgBgImgTransparency'])
                            && (!affectedKeys().hasAny(['fontSize']) || request.resource.data.fontSize < 15 )));
      match /checkout_sessions/{id} {
        allow read, write: if isVerified() && request.auth.uid == uid;
      }
      match /subscriptions/{id} {
        allow read: if isVerified() && request.auth.uid == uid;
      }
    }
    
    function isDocOwner(docId) {
      // debug( request.auth.uid );
      let isOwner = request.auth.uid == docId;

      return isLoggedIn() && isOwner;
    }

    match /products/{id} {
      allow read: if true;

      match /prices/{id} {
        allow read: if true;
      }

      match /tax_rates/{id} {
        allow read: if true;
      }
    }

    match /oembedProviders/{docId} {
      allow read: if true;
    }
  }
}
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }

    function currentUser() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    match /messages/{docId} {
      allow read: if request.auth.uid != null && (resource.data.isDeleted == false || currentUser().isModerator == true || currentUser().isAdmin == true);
      allow update: if (currentUser().isModerator == true || currentUser().isAdmin == true) && 
                      // If the request only has the isDeleted field
                      // https://firebase.google.com/docs/firestore/security/rules-fields#allowing_only_certain_fields_to_be_changed
                      (request.resource.data.diff(resource.data).affectedKeys()
                      .hasOnly(['isDeleted']));
    }

    match /modActionLog/{docId} {
      allow read: if request.auth.uid != null && currentUser().isAdmin == true;
      allow create: if request.auth.uid != null && currentUser().isAdmin == true;
      allow delete: if request.auth.uid != null && currentUser().isAdmin == true;
    }

    match /settings/filteredWords {
      allow read: if request.auth.uid != null && currentUser().isAdmin == true;
      allow create: if request.auth.uid != null && currentUser().isAdmin == true;
      allow update: if request.auth.uid != null && currentUser().isAdmin == true;
      allow delete: if request.auth.uid != null && currentUser().isAdmin == true;
    }
  
    match /userPresences/{docId} {
      allow create: if true;
      allow read: if true;
      allow update: if true;
      allow delete: if true;
    }
  
    match /reauthentications/{docId} {
      allow read: if true;
    }
  
    match /users/{docId} {
      allow create: if isDocOwner(docId);
      allow read: if true;
      allow update: if isDocOwner(docId) && 
                    // NOTE: Don't allow updating these keys
                    (!request.resource.data.diff(resource.data).affectedKeys()
                    .hasAny(['isAdmin', 'isModerator', 'isBanned']));
    }

    function isDocOwner(docId) {
      // debug( request.auth.uid );
      let isSignedIn = request.auth.uid != null;
      let isOwner = request.auth.uid == docId;

      return isSignedIn && isOwner;
    }
  
    match /oembedProviders/{docId} {
      allow read: if true;
    }
  }
}